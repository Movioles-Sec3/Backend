"""
Script para probar la sincronizaci√≥n offline
Simula la creaci√≥n de usuarios sin conexi√≥n a internet
"""

import os
os.environ['AUTO_SYNC_TO_CLOUD'] = 'true'
os.environ['CLOUD_DATABASE_URL'] = 'postgresql://invalid:invalid@localhost:5432/invalid'

from database import SessionLocal, setup_cloud_replication, register_sync_events
from models import Usuario
from auth import get_password_hash
import time

print("="*60)
print("TEST DE SINCRONIZACI√ìN OFFLINE")
print("="*60)
print()

# Configurar (con URL inv√°lida para simular sin internet)
setup_cloud_replication()
register_sync_events()

print("\n1Ô∏è‚É£ Creando usuario SIN CONEXI√ìN a internet...")
print("-"*60)

db = SessionLocal()

# Crear usuario
nuevo_usuario = Usuario(
    nombre="Test Offline",
    email="offline@test.com",
    password=get_password_hash("123456"),
    saldo=0.0
)

db.add(nuevo_usuario)
db.commit()
db.refresh(nuevo_usuario)

print(f"‚úÖ Usuario creado localmente: {nuevo_usuario.nombre} ({nuevo_usuario.email})")
print(f"   ID: {nuevo_usuario.id}")

db.close()

print("\n2Ô∏è‚É£ Esperando que el sistema intente sincronizar...")
print("-"*60)
print("   El sistema detectar√° que no hay internet")
print("   La operaci√≥n quedar√° en cola esperando conexi√≥n")

time.sleep(5)

from database import get_sync_status

status = get_sync_status()

print(f"\nüìä ESTADO DE SINCRONIZACI√ìN:")
print(f"   Internet disponible: {status['internet_available']}")
print(f"   Operaciones en cola: {status['queue_size']}")
print(f"   Thread activo: {status['sync_thread_alive']}")

if status['queue_size'] > 0:
    print(f"\n‚úÖ TEST EXITOSO:")
    print(f"   - Usuario creado localmente")
    print(f"   - {status['queue_size']} operaci√≥n(es) esperando en cola")
    print(f"   - Se sincronizar√° autom√°ticamente cuando haya internet")
else:
    print(f"\n‚ö†Ô∏è  La cola est√° vac√≠a (esto no deber√≠a pasar)")

print("\n" + "="*60)